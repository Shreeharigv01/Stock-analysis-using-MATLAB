%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% STOCK PRICE FORECAST (EDUCATIONAL PURPOSES ONLY)
%
% DISCLAIMER:
%   This code is provided solely for educational purposes and should not be
%   considered financial advice. Always conduct your own research and consult
%   a professional before making any investment decisions. Do not rely solely
%   on the forecasts or technical analysis generated by this script.
%
% The script performs the following steps:
%   1. Prompts the user to select a stock ticker from a list of available CSV
%      files.
%   2. Loads and preprocesses the corresponding CSV file:
%        - Standardizes column names.
%        - Removes '$' signs from price columns.
%        - Converts date strings to datetime.
%   3. Prompts the user for a date range and filters the dataset.
%   4. Displays the last 5 rows of the filtered dataset for verification.
%   5. Splits the data into training (80%) and testing (20%).
%   6. Determines the duration of the selected date range.
%        - If ≤ 6 months (~183 days): trains an ARIMA(2,1,2) model (short-term).
%        - If > 6 months: trains an LSTM network (long-term).
%   7. Determines the next trading day (skips weekends).
%   8. Plots historical prices with the forecast marker.
%   9. Displays additional technical indicator visuals (20-day & 50-day SMAs,
%      and a 14-day RSI).
%  10. Provides a technical analysis summary and recommendation (BUY/HOLD/SELL).
%
% Available stocks (CSV files must be in the current folder):
%   APPLE, BOEING, CISCO, AMAZON, COCO, DISNEY, GOOGLE, IBM, INTEL, NETFLIX
%
% Tuning suggestions:
% - Adjust the sliding window size (e.g., 30, 40, 60, or 90 days) as needed.
% - Increase LSTM epochs for better convergence.
% - Experiment with ARIMA orders and technical indicator parameters.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

clc;
clear;
close all;

%% 1. Prompt User to Select Stock
availableStocks = {'APPLE','BOEING','CISCO','AMAZON','COCO','DISNEY',...
                   'GOOGLE','IBM','INTEL','NETFLIX','TESLA'};
fprintf('Available stocks:\n');
for i = 1:length(availableStocks)
    fprintf('  %s\n', availableStocks{i});
end
stockTicker = input('Enter the stock ticker (e.g., APPLE, BOEING, etc.): ', 's');
stockTicker = upper(strtrim(stockTicker));  % Convert to uppercase and remove extra spaces

filename = [stockTicker, '.csv'];
if ~isfile(filename)
    error('The file %s does not exist. Please verify the ticker symbol and try again.', filename);
end

%% 2. Load and Preprocess Data
stockData = readtable(filename, 'PreserveVariableNames', true);

% Standardize column names: Date, Close, Volume, Open, High, Low
stockData.Properties.VariableNames = {'Date','Close','Volume','Open','High','Low'};

% Remove '$' signs from price columns (if any) and convert to numeric values
priceCols = {'Close', 'Open', 'High', 'Low'};
for i = 1:length(priceCols)
    stockData.(priceCols{i}) = str2double( erase(stockData.(priceCols{i}), '$') );
end

% Convert the Date column to datetime (format: MM/dd/yyyy) and sort data
stockData.Date = datetime(stockData.Date, 'InputFormat', 'MM/dd/yyyy');
stockData = sortrows(stockData, 'Date');

%% 3. Prompt User for Date Range and Filter Data
fromDateStr = input('Enter the start date (MM/dd/yyyy): ', 's');
toDateStr   = input('Enter the end date (MM/dd/yyyy): ', 's');
fromDate = datetime(fromDateStr, 'InputFormat', 'MM/dd/yyyy');
toDate   = datetime(toDateStr,   'InputFormat', 'MM/dd/yyyy');

% Filter the dataset based on the specified date range
stockData = stockData(stockData.Date >= fromDate & stockData.Date <= toDate, :);
if isempty(stockData)
    error('No data found in the specified date range.');
end

% Extract dates and closing prices; fill missing values if any
allDates = stockData.Date;
allPrices = stockData.Close;
allPrices = allPrices(:);  
allPrices = fillmissing(allPrices, 'linear');

% Display the last 5 rows of the filtered dataset for verification
disp('----------------------------------------------');
disp('Latest 5 rows of the filtered dataset:');
disp(stockData(end-4:end, :));
disp('----------------------------------------------');

%% 4. Split Data into Training (80%) and Testing (20%)
train_size = round(0.8 * length(allPrices));
train_data = allPrices(1:train_size);
test_data  = allPrices(train_size+1:end);
dates_test = allDates(train_size+1:end);
train_data = train_data(:);
test_data  = test_data(:);

fprintf('Training data points: %d\n', train_size);
fprintf('Testing data points: %d\n', length(test_data));

%% 5. Determine Data Range and Train Forecasting Model
% Calculate the duration (in days) of the selected dataset
durationDays = days(toDate - fromDate);

if durationDays <= 183
    % Short-term analysis: Use ARIMA model
    analysisType = 'Short-term';
    chosenModel = 'ARIMA (Short-term forecast)';
    
    fprintf('\nTraining ARIMA model...\n');
    arima_model = arima(2,1,2);
    % Suppress the automatic ARIMA output by setting 'Display','off'
    arima_fit = estimate(arima_model, train_data, 'Display', 'off');
    [arima_forecast, ~] = forecast(arima_fit, 1, 'Y0', train_data);
    finalForecast = arima_forecast(1);
    
else
    % Long-term analysis: Use LSTM model
    analysisType = 'Long-term';
    chosenModel = 'LSTM (Long-term forecast)';
    
    fprintf('\nTraining LSTM model...\n');
    n = 30;  % Sliding window size (days)
    numSamples = length(train_data) - n;
    inputData = zeros(numSamples, n);
    outputData = zeros(numSamples, 1);

    % Form input-output pairs for LSTM training
    for j = n+1:length(train_data)
        inputData(j-n, :) = train_data(j-n:j-1);
        outputData(j-n) = train_data(j);
    end

    % Normalize data to the range [-1,1] using mapminmax
    [inputDataNorm, inputPS] = mapminmax(inputData');  
    [outputDataNorm, outputPS] = mapminmax(outputData');
    inputDataNorm = inputDataNorm';  
    outputDataNorm = outputDataNorm';

    % Prepare training sequences for LSTM
    XTrain = cell(numSamples, 1);
    for i = 1:numSamples
        XTrain{i} = inputDataNorm(i, :);
    end
    YTrain = outputDataNorm;

    % Define and train the LSTM network
    layers = [ sequenceInputLayer(1)
               lstmLayer(50, 'OutputMode','last')
               fullyConnectedLayer(1)
               regressionLayer ];
    options = trainingOptions('adam', 'MaxEpochs', 350, 'MiniBatchSize', 16, ...
                              'Shuffle', 'every-epoch', 'Verbose', false);
    lstm_net = trainNetwork(XTrain, YTrain, layers, options);

    % Forecast with LSTM: use the last n days from the training data
    lastNdays = train_data(end-n+1:end)';  
    lastNdaysNorm = mapminmax('apply', lastNdays', inputPS);
    lastNdaysNorm = lastNdaysNorm';  
    XTest = {lastNdaysNorm};
    lstm_next_norm = predict(lstm_net, XTest);
    lstm_next = mapminmax('reverse', lstm_next_norm, outputPS);
    finalForecast = lstm_next(1);
end

%% 6. Determine the Next Trading Day (beyond Input Data)
% Ensure allDates is a datetime array
allDates = datetime(allDates, 'Format', 'yyyy-MM-dd');

% Sort and show last few dates to confirm input
allDates = sort(allDates);
disp('Sanity Check - Last 5 dates in allDates:');
disp(tail(allDates, 5));

lastDate = max(allDates(:));
nextDate = lastDate + days(1);  % use days instead of caldays — more flexible

while ismember(weekday(nextDate), [1 7])  % Skip Sunday(1), Saturday(7)
    nextDate = nextDate + days(1);
end

%% 7. Visualization of Forecast Markers
figure;
hold on;
plot(allDates, allPrices, 'b-', 'LineWidth', 1.5);         % Historical prices
scatter(allDates(end), allPrices(end), 70, 'filled');        % Last known price marker
scatter(nextDate, finalForecast, 70, 'filled');              % Forecast marker
hold off;
title([stockTicker, ' Stock Price Forecast (', analysisType, ' Analysis)']);
xlabel('Date');
ylabel('Price ($)');
legend('Historical Price', 'Last Known Price', chosenModel, 'Location', 'best');
grid on;

%% 8. Display Forecast Results
disp('========================================================================================');
disp(['         ', stockTicker, ' STOCK PRICE FORECAST']);
disp('========================================================================================');
fprintf('Selected Data Range: %d days (~%.1f months) [%s analysis]\n', durationDays, durationDays/30.4, analysisType);
fprintf('Chosen Forecasting Model: %s\n', chosenModel);
fprintf('Next Trading Day (forecast for %s): %s\n', chosenModel, datestr(nextDate, 'mm/dd/yyyy'));
fprintf('Predicted Price: $%.4f\n', finalForecast);
disp('========================================================================================');

%% 9. Additional Technical Indicator Visuals
% Compute 20-day and 50-day Simple Moving Averages (SMAs)
sma20 = movmean(allPrices, [19 0]);  
sma50 = movmean(allPrices, [49 0]);  

% Compute the 14-day Relative Strength Index (RSI)
if exist('rsindex', 'file') == 2
    rsiValues = rsindex(allPrices, 14);
else
    delta = diff(allPrices);
    up = delta; up(up < 0) = 0;
    down = -delta; down(down < 0) = 0;
    avgGain = movmean(up, [13 0]);
    avgLoss = movmean(down, [13 0]);
    rs = avgGain ./ avgLoss;
    rsiValues = 100 - (100 ./ (1 + rs));
    rsiValues = [NaN; rsiValues];  % Prepend NaN to match vector length
end

% Create a new figure with subplots for technical indicators
figure;
% Subplot 1: Price with SMAs
subplot(2,1,1);
plot(allDates, allPrices, 'b-', 'LineWidth', 1.5); 
hold on;
plot(allDates, sma20, 'r--', 'LineWidth', 1.5);
plot(allDates, sma50, 'k--', 'LineWidth', 1.5);
title([stockTicker, ' Price with 20-day & 50-day SMAs']);
xlabel('Date');
ylabel('Price ($)');
legend('Price', '20-day SMA', '50-day SMA', 'Location', 'best');
grid on;
hold off;
% Subplot 2: RSI
subplot(2,1,2);
plot(allDates, rsiValues, 'r-', 'LineWidth', 1.5);
title('Relative Strength Index (RSI, 14-day)');
xlabel('Date');
ylabel('RSI');
ylim([0 100]);
grid on;

%% 10. Technical Analysis Explanation and Recommendation
% Explanation:
% - The 20-day and 50-day SMAs capture short- and medium-term trends.
%   If the current price is above these averages, it indicates bullish momentum.
% - The RSI (14-day) measures market momentum. An RSI below 30 may suggest the
%   stock is oversold (a potential BUY signal), while an RSI above 70 may indicate
%   the stock is overbought (a potential SELL signal).
%
% Generate a recommendation based on the latest RSI value:
lastRSI = rsiValues(end);
if isnan(lastRSI)
    decision = 'HOLD';
else
    if lastRSI < 30
        decision = 'BUY';
    elseif lastRSI > 70
        decision = 'SELL';
    else
        decision = 'HOLD';
    end
end

fprintf('\nTECHNICAL ANALYSIS SUMMARY for %s:\n', stockTicker);
fprintf(' - SMAs: The 20-day and 50-day SMAs capture short-to-medium term trends.\n');
fprintf(' - RSI (14-day): Values <30 indicate potential oversold conditions (BUY),\n');
fprintf('                while values >70 indicate potential overbought conditions (SELL).\n');
fprintf(' - Current RSI value: %.2f\n', lastRSI);
fprintf('\n**RECOMMENDATION: %s**\n', decision);
fprintf('\nDISCLAIMER: This analysis is provided solely for educational purposes.\n');
fprintf('Do your own research and consult a professional before making any investment decisions.\n');
